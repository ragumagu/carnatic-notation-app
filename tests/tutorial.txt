$# In-place editor

This editor will support headings, paragraphs and tables.

The editor is a HTML content-editable element.

In a content-editable, all of your elements must be divs and spans. Nothing else. You can't use CSS to set display to inline-block and such, because it won't let you navigate the text same way as it would be with plain text. For example, home / end keys will jump within a div. If it is inline with another div, it will still jump within the div, and it won't be placed at the end of the line on the screen, leading to a horrible navigation experience. So, we are left with spans to do formatting. Turns out you can't set the width of a span, but you can set a margin. So, we use margin-right to align letters in a table.

Remember: you don't want to be fighting with JS to get the job done.

HTML, CSS and JS are the material of the web: these are transferable, and readable by any browser which is compatible with the spec. If we want to preserve formatting, we have to export text/html.

We want the text output of this editor to contain its formatting. There is no need for additional markup / config to view the text (at least as of now). The text indicates how it should be rendered. In other word, the text speaks for itself, you need a listener that's all. :)

$# Features:

Everything you type will be stored in browser - local storage.

Putting $# at the start of a line will create a heading.
Putting ## at the start of a line will create a sub heading.

A table has rows and columns.

Rows are indicated by row markers: || (two pipes) or // (two slashes). When user inputs a row marker, the editor creates a row, and two row markers will be inserted: one at the beginning of a line and one at the end of the line. Row markers are automatically inserted at the end of line beginning with a row marker, even if the end marker is not present. Row markers must be present at the beginning of a row. If you alter the start row marker, the line won't be considered as a row anymore.

Tables must have consecutive rows. An empty line can be used to indicate the end of a table.

A column is indicated by column markers: | (a single pipe for a visible separator) or / (a single forward slash for a hidden separator).

Row markers and column markers are aligned automatically.

|| This is a long sentence. /You can have many / words /in a sentence. ||
|| This is another row./Note how you can align the / words /by selecting /the row marker /and clicking on the letters. ||

You can have empty cells in a row: insert a space indicating the empty cell and insert another separator after the space.
On clicking any row marker, you enter alignment mode: the table will be selected and all letters become clickable. 

The alignment mode makes it easier to add columns to your table, especially if you have many columns to deal with. In alignment mode, you can just click a letter to add a separator. You can click on a separator to remove it. Letters can be removed only when typing, and cannot be removed in alignment mode.

You can exit alignment mode by clicking on a row marker, or by clicking outside the table, or by pressing escape on your keyboard. Outside alignment mode, you cannot click on letters to add separators, you cannot click on separators to remove them.

Formatting will be applied to the table after any change to its contents.

Support for diacritics is needed.

## Tests

In projects like this, you need a test suite. You need some thing that tells you quickly when any feature breaks.

## Life-cycles

You have to define life cycles for each feature.
